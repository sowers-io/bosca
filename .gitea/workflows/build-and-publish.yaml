name: Build & Publish Backend and Frontend

on:
  push:
    tags:
      - '*'
  pull_request:
    tags:
      - '*'

jobs:
  lint:
    runs-on: ubuntu-22.04
    env:
      RUNNER_TOOL_CACHE: /toolcache
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: |
          mkdir -p $HOME/.local
          PB_REL="https://github.com/protocolbuffers/protobuf/releases"
          curl -LO $PB_REL/download/v30.2/protoc-30.2-linux-x86_64.zip
          unzip protoc-30.2-linux-x86_64.zip -d $HOME/.local
      - run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - run: export PATH="$HOME/.cargo/bin:$HOME/.local/bin:$PATH" && cargo clippy
      - uses: actions/cache/save@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

  build-and-publish-backend:
    runs-on: ubuntu-22.04
    env:
      RUNNER_TOOL_CACHE: /toolcache
      IMAGE_PREFIX: ${{ secrets.IMAGE_PREFIX }}
      DOCKER_REGISTRY: ${{ secrets.REGISTRY }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - run: |
          PB_REL="https://github.com/protocolbuffers/protobuf/releases"
          curl -LO $PB_REL/download/v30.2/protoc-30.2-linux-x86_64.zip
          unzip protoc-30.2-linux-x86_64.zip -d $HOME/.local
      - run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      - run: export PATH="$HOME/.cargo/bin:$HOME/.local/bin:$PATH" && cargo build --release
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push database migrations
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-migrations
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/database-migrations:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/database-migrations:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/database-migrations:${{ github.ref_name }}
      - name: Build and push cache server
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-dc
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/cache:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/cache:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/cache:${{ github.ref_name }}
      - name: Build and push server
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-server
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/server:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/server:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/server:${{ github.ref_name }}
      - name: Build and push analytics
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-analytics
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/analytics:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/analytics:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/analytics:${{ github.ref_name }}
      - uses: actions/cache/save@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

  build-and-publish-runner-enterprise:
    runs-on: ubuntu-22.04
    env:
      RUNNER_TOOL_CACHE: /toolcache
      IMAGE_PREFIX: ${{ secrets.IMAGE_PREFIX }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ssh-known-hosts: ${{ secrets.KNOWN_HOSTS }}
          ssh-key: ${{ secrets.READ_SSH_KEY }}
          token: ${{ secrets.PRIVATE_PAT }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      - uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '24'
      - run: cd workspace/runners/enterprise/bible && ./gradlew publishToMavenLocal
      - run: cd workspace/runners/kotlin && ./gradlew nativeBuild --no-daemon
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Publish Runner Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-runner
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/kotlin-runner-enterprise:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/kotlin-runner-enterprise:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/kotlin-runner-enterprise:${{ github.ref_name }}
      - uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

  build-and-publish-imageprocessor:
    runs-on: ubuntu-22.04
    env:
      RUNNER_TOOL_CACHE: /toolcache
      IMAGE_PREFIX: ${{ secrets.IMAGE_PREFIX }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push imageprocessor
        uses: docker/build-push-action@v3
        with:
          context: workspace/core/imageprocessor
          file: workspace/core/imageprocessor/Dockerfile
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/imageprocessor:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/imageprocessor:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/imageprocessor:${{ github.ref_name }}

  build-and-publish-administration:
    runs-on: ubuntu-22.04
    env:
      RUNNER_TOOL_CACHE: /toolcache
      IMAGE_PREFIX: ${{ secrets.IMAGE_PREFIX }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      NUXT_UI_PRO_LICENSE: ${{ secrets.NUXT_UI_PRO_LICENSE }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ssh-known-hosts: ${{ secrets.KNOWN_HOSTS }}
          ssh-key: ${{ secrets.READ_SSH_KEY }}
          token: ${{ secrets.PRIVATE_PAT }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/package.json') }}
      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
      - run: ./scripts/build-administration
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Publish Administration Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-administration
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/administration:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/administration:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/administration:${{ github.ref_name }}
      - name: Build and Publish Administration Query Installer Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-administration-query-installer
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/administration-query-installer:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/administration-query-installer:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/administration-query-installer:${{ github.ref_name }}
      - uses: actions/cache/save@v4
        with:
          path: |
            ~/.deno
            ~/.cache/deno
          key: ${{ runner.os }}-deno-${{ hashFiles('**/package.json') }}

  build-and-publish-runner-community:
    runs-on: ubuntu-22.04
    env:
      RUNNER_TOOL_CACHE: /toolcache
      IMAGE_PREFIX: ${{ secrets.IMAGE_PREFIX }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-community-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      - uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '24'
      - run: cd workspace/runners/kotlin && ./gradlew nativeBuild --no-daemon
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Publish Runner Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-runner
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/kotlin-runner-community:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/kotlin-runner-community:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/kotlin-runner-community:${{ github.ref_name }}
      - name: Build and Publish Runner Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-blog-installer
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/blog-installer:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/blog-installer:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/blog-installer:${{ github.ref_name }}
      - uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-community-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

  build-and-publish-runner-community-compatibility:
    runs-on: ubuntu-22.04
    env:
      RUNNER_TOOL_CACHE: /toolcache
      IMAGE_PREFIX: ${{ secrets.IMAGE_PREFIX }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      MARCH: compatibility
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: false
      - uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '24'
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-community-compat-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      - run: cd workspace/runners/kotlin && ./gradlew nativeBuild --no-daemon
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Publish Runner Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-runner
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/kotlin-runner-community-compatibility:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/kotlin-runner-community-compatibility:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/kotlin-runner-community-compatibility:${{ github.ref_name }}
      - name: Build and Publish Runner Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-blog-installer
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/blog-installer-compatibility:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/blog-installer-compatibility:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/blog-installer-compatibility:${{ github.ref_name }}
      - uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-community-compat-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

  build-and-publish-runner-enterprise-compatibility:
    runs-on: ubuntu-22.04
    env:
      RUNNER_TOOL_CACHE: /toolcache
      IMAGE_PREFIX: ${{ secrets.IMAGE_PREFIX }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      MARCH: compatibility
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          ssh-known-hosts: ${{ secrets.KNOWN_HOSTS }}
          ssh-key: ${{ secrets.READ_SSH_KEY }}
          token: ${{ secrets.PRIVATE_PAT }}
      - uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-compat-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
      - uses: actions/setup-java@v4
        with:
          distribution: 'graalvm'
          java-version: '24'
      - run: cd workspace/runners/enterprise/bible && ./gradlew publishToMavenLocal
      - run: cd workspace/runners/kotlin && ./gradlew nativeBuild --no-daemon
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Publish Runner Image
        uses: docker/build-push-action@v3
        with:
          context: .
          file: Dockerfile-runner
          push: true
          tags: |
            ${{ secrets.IMAGE_PREFIX }}/bosca/kotlin-runner-enterprise-compatibility:latest
            ${{ secrets.IMAGE_PREFIX }}/bosca/kotlin-runner-enterprise-compatibility:${{ github.sha }}
            ${{ secrets.IMAGE_PREFIX }}/bosca/kotlin-runner-enterprise-compatibility:${{ github.ref_name }}
      - uses: actions/cache/save@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-compat-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
