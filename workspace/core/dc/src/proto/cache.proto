syntax = "proto3";

package bosca.dc;

service DistributedCache {
  rpc CreateCache (CreateCacheRequest) returns (CreateCacheResponse);

  rpc GetValue (GetValueRequest) returns (GetValueResponse);

  rpc PutValue (PutValueRequest) returns (PutValueResponse);

  rpc DeleteValue (DeleteValueRequest) returns (DeleteValueResponse);

  rpc ClearCache (ClearCacheRequest) returns (ClearCacheResponse);

  rpc Replicate (Notification) returns (Empty);

  rpc Join (Node) returns (Empty);

  rpc Ping (Node) returns (Empty);

  rpc SubscribeNotifications (SubscribeNotificationsRequest) returns (stream Notification);
}

message Empty {
}

message Node {
  string id = 1;
  string ip = 2;
  uint32 port = 3;
}

message CreateCacheRequest {
  string name = 1;
  uint64 max_capacity = 2;
}

message CreateCacheResponse {
  string cache = 1;
}

message GetValueRequest {
  string cache = 1;
  string key = 2;
}

message GetValueResponse {
  optional bytes value = 1;
}

message PutValueRequest {
  string cache = 1;
  string key = 2;
  bytes value = 3;
}

message PutValueResponse {
  bool success = 1;
}

message DeleteValueRequest {
  string cache = 1;
  string key = 2;
}

message DeleteValueResponse {
  bool success = 1;
}

message ClearCacheRequest {
  string cache = 1;
}

message ClearCacheResponse {
  bool success = 1;
}

message SubscribeNotificationsRequest {
  string cache = 1;
}

enum NotificationType {
  CACHE_CREATED = 0;
  VALUE_UPDATED = 1;
  VALUE_DELETED = 2;
  CACHE_CLEARED = 3;
  NODE_FOUND = 4;
  NODE_LOST = 5;
}

message Notification {
  string cache = 1;
  uint64 max_capacity = 2;
  NotificationType notification_type = 3;
  optional string key = 4;
  optional bytes value = 5;
  optional Node node = 6;
}