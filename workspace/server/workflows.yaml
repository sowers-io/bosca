#file: noinspection YAMLSchemaValidation
traits:
  common.text: { }
  bible.usx:
    workflowIds:
      - bible.usx
  bible.usx.book:
    workflowIds:
      - bible.usx.book
  bible.usx.chapter:
    workflowIds:
      - bible.usx.chapter
  bible.usx.verse:
    workflowIds:
      - bible.usx.verse
  common.temporary: { }
  media.video.local:
    workflowIds:
      - media.transcribe
  media.video.mux:
    workflowIds:
      - media.transcribe
      - video.send_to_mux

models:
  default:
    type: openai-llm
    name: gpt-4o
    configuration:
      temperature: 0
      vectorSize: 1536
  all-minilm:
    type: ollama-embedding
    name: all-minilm
    configuration:
      temperature: 0
      vectorSize: 384
  phi3:medium-128k:
    type: ollama-llm
    name: phi3:medium-128k
    configuration:
      temperature: 0
  phi3:mini:
    type: ollama-llm
    name: phi3:mini
    configuration:
      temperature: 0
  gpt-4o:
    type: openai-llm
    name: gpt-4o
    configuration:
      temperature: 0
  gemini-1.5-pro:
    type: google-llm
    name: gemini-1.5-pro
    configuration:
      temperature: 0

storageSystems:
  metadata.search.index:
    type: search
    configuration:
      indexName: metadata
      type: meilisearch
      primaryKey: _id
      embeddings.source: ollama
      embeddings.url: http://ollama:11434/api/embeddings
      embeddings.model: all-minilm
      embeddings.template: "A document titled {{doc._name}} with a body of {{doc._content|truncatewords:500}}"
  bible.verse.search.index:
    type: search
    configuration:
      indexName: bibleverses
      type: meilisearch
      primaryKey: _id
      embeddings.source: ollama
      embeddings.url: http://ollama:11434/api/embeddings
      embeddings.model: all-minilm
      embeddings.template: "A Bible verse titled {{doc._name}} with a body of {{doc._content}}"
  bible.chapter.vector.index:
    type: vector
    models:
      default:
        configuration: { }
    configuration:
      indexName: biblechapters
      type: qdrant
      vectorSize: 1536
  bible.verse.vector.index:
    type: vector
    models:
      default:
        configuration: { }
    configuration:
      indexName: bibleverses
      type: qdrant
      vectorSize: 1536
  bible.verse.label.vector.index:
    type: vector
    models:
      default:
        configuration: { }
    configuration:
      indexName: bibleverselabels
      type: qdrant
      vectorSize: 1536

workflows:
  states:
    pending:
      name: Pending
      type: pending
    processing:
      name: Processing
      description: Initial Processing after Metadata Creation
      type: processing
      workflowId: metadata.process
    draft:
      name: Draft
      type: draft
    pending-approval:
      name: Pending Approval
      type: approval
    approved:
      name: Approved
      type: approved
    published:
      name: Published
      type: published
    failure:
      name: Failure
      type: failure
  transitions:
    - from: pending
      to: processing
      description: Content is ready, begin processing
    - from: processing
      to: draft
      description: Content has been processed, now in draft mode
    - from: processing
      to: failure
      description: Processing failed
    - from: failure
      to: processing
      description: Re-processing after failure
    - from: draft
      to: processing
      description: Re-processing draft
    - from: draft
      to: published
      description: Publish a draft
    - from: draft
      to: pending-approval
      description: Move draft to pending approval
    - from: pending-approval
      to: approved
      description: Approve
    - from: pending-approval
      to: draft
      description: Move back to draft
    - from: approved
      to: published
      description: Approve
    - from: approved
      to: draft
      description: Move back to draft
    - from: published
      to: draft
      description: Unpublish
  activities:
    metadata.traits.process: { }
    collection.traits.process: { }
    metadata.child.workflow:
      configuration:
        workflowId: The workflow ID to execute
    # ai activities
    ai.prompt:
      description: Take the input from the supplementary data and pass it to the provided model using the provided prompt.  The output will be based on the output from the model.
      inputs:
        supplementaryId: supplementary
      outputs:
        supplementaryId: supplementary
    ai.embeddings.text:
      description: Generate embeddings from the supplied supplementary data using the supplied model.  Store the embeddings in the specified storage system.
      inputs:
        supplementaryId: supplementary
    ai.embeddings.pending.from-json-table:
      description: Generate pending embeddings (which is a proto structure) from the supplied supplementary data, which should be a json table.  The specified columns will be used to construct the pending embedding.
      inputs:
        supplementaryId: supplementary
      outputs:
        supplementaryId: supplementary
      configuration:
        idColumn: usfm
        contentColumn: labels
    ai.embeddings.pending.index:
      description: Generate embeddings from the supplied supplementary data (which is expected to be pending embeddings).
      inputs:
        supplementaryId: supplementary
    # metadata activities
    metadata.text.extract:
      outputs:
        supplementaryId: supplementary
    metadata.text.index: { }
    metadata.supplementary.text.index:
      inputs:
        supplementaryId: supplementary
    collection.set.ready:
      configuration:
        collection_id: ""
        recursive: false
    collection.set.public:
      configuration:
        collection_id: ""
        recursive: false
    metadata.set.ready: { }
    metadata.set.public: { }
    metadata.transition.complete: { }
    metadata.transition.fail: { }
    metadata.transition.to:
      configuration:
        state: ""
        status: ""
    collection.transition.to:
      configuration:
        state: ""
        status: ""
        ready: false
    metadata.delete: { }
    # supplementary activities
    supplementary.delete:
      inputs:
        supplementaryId: supplementary
    # bible activities
    bible.usx.process: { }
    bible.usx.ai: { }
    bible.usx.book.upload: { }
    bible.usx.chapter.upload: { }
    bible.usx.chapter.ai: { }
    bible.usx.verse.upload: { }
    # media
    media.transcribe:
      outputs:
        supplementaryId: supplementary
        supplementaryTextId: supplementary
    video.send_to_mux:
      outputs:
        supplementaryId: supplementary

  workflows:
    # metadata workflows
    metadata.process:
      queue: metadata
      activities:
        metadata.traits.process:
          queue: traits
          executionGroup: 1
        metadata.transition.to:
          queue: transition
          executionGroup: 2
          configuration:
            state: draft
            status:
    metadata.set.ready:
      queue: metadata
      activities:
        metadata.set.ready:
    metadata.set.public:
      queue: metadata
      activities:
        metadata.set.public:
    # collection workflows
    collection.process:
      queue: metadata
      activities:
        collection.traits.process:
          queue: traits
          executionGroup: 1
        collection.transition.to:
          queue: transition
          executionGroup: 2
          configuration:
            state: draft
            status:
    collection.set.ready:
      queue: metadata
      activities:
        collection.set.ready:
    collection.set.public:
      queue: metadata
      activities:
        collection.set.public:
    # bible workflows
    bible.usx:
      queue: bible
      activities:
        bible.usx.process: { }
    ## bible book workflow
    bible.usx.book:
      queue: bible-book
      activities:
        bible.usx.book.upload: { }
    bible.usx.chapter:
      queue: bible-chapter
      activities:
        bible.usx.chapter.upload: { }
        bible.usx.chapter.ai:
          queue: bible-ai
          outputs:
            supplementaryId: chapter-verse-table
    ## bible chapter ai workflow
    bible.usx.chapter.ai:
      queue: bible-ai
      activities:
        ai.prompt:
          executionGroup: 1
          prompts:
            verse.labeller: { }
          models:
            default: { }
          inputs:
            supplementaryId: chapter-verse-table
          outputs:
            supplementaryId: chapter-verse-table-prompted
        ai.embeddings.pending.from-json-table:
          executionGroup: 2
          models:
            default: { }
          inputs:
            supplementaryId: chapter-verse-table-prompted
          outputs:
            supplementaryId: chapter-verse-pending-embeddings
          configuration:
            idColumn: usfm
            contentColumn: labels
        ai.embeddings.pending.index:
          executionGroup: 3
          inputs:
            supplementaryId: chapter-verse-pending-embeddings
          models:
            default: { }
          storageSystems:
            bible.verse.label.vector.index: { }
    ## bible verse workflow
    bible.usx.verse:
      queue: bible-verse
      activities:
        bible.usx.verse.upload:
          executionGroup: 1
        metadata.text.index:
          queue: search-index
          executionGroup: 2
          storageSystems:
            bible.verse.search.index: { }
    # media transcription
    media.transcribe:
      queue: media-transcription
      activities:
        media.transcribe:
          outputs:
            supplementaryId: transcription
            supplementaryTextId: transcription-text
    # video hls stream
    video.send_to_mux:
      queue: media-upload
      activities:
        video.send_to_mux:
          outputs:
            supplementaryId: mux

prompts:
  verse.labeller:
    systemPrompt: |
      Task: 
      You are a Biblical theologian who is also an expert in felt needs.  Your job is to classify verses, annotating them with felt needs.
      You will be given a JSON array of objects. Your goal is to add a new label property with a specific set of felt needs to each object in the array.
      You will also add a new related property to each object in the array, where the related property is a contiguous list of verse(s) that add context to the felt need and can be read in a linear way (but is not the same json record you are analyzing).  Use the "usfm" field as a pointer to the related verse(s).

      Instructions:
      1. **Analyze Input:** Carefully examine the provided JSON array. Understand the structure of the objects and the existing properties they contain.
      2. **Identify Label:** For each verse in the input table, determine the most relevant label(s) from the list of labels provided and the related verse(s). If no label matches, use an empty array. If no related verses match, use an empty array.
      3. **Modify JSON:**
        * Add a new property named "labels" to each object in the array.
        * Assign the identified label(s) as the value of the "labels" property for each object.
      4. **Output:** Return the modified JSON array with the following format:
        [{{"usfm": "PRO.1.1", "verse": "The proverbs of Solomon the son of", "labels": [], related: []}}, {{"usfm": "PRO.1.2", "verse": "To know wisdom and instruction; To discern the words of understanding;", "labels": ["wisdom", "guidance"], "related": ["PRO.1.1"]}}]

      Labels:
      salvation, forgiveness, assurance, deliverance, healing, provision, protection, guidance, wisdom, comfort, peace, joy, love, belonging, purpose, restoration, vindication, hope, strength, patience, faith, mercy, humility, holiness, worship, justice

      Constraints:
      * Use only the labels provided in the list. Do not introduce new labels.
      * Use only the usfm field to reference related verses.
      * If no label from the list fits a verse, use "no match" as the label.
      * Maintain the original order of objects in the array.
      * Ensure the output JSON is valid and correctly formatted and there is only JSON as the output.
      * Return the entire JSON array with the new "labels" and "related" properties added to each object and only the new JSON array, no other content.
    userPrompt: |
      JSON Array:
      {input}